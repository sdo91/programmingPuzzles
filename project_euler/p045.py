#!/usr/bin/env python

from __future__ import division


import time
import math


# from prime_tools.prime_tools import PrimeTools



"""
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n-1)/2	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n-1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""
def main():
    print 'starting {}'.format(__file__.split('/')[-1])
    startTime = time.time()


    assert not isPentagonal(40754)
    assert isPentagonal(40755)
    assert not isPentagonal(40756)

    assert not isHexagonal(40754)
    assert isHexagonal(40755)
    assert not isHexagonal(40756)

    # for x in xrange(300):
    x = 285
    while True:
        x += 1
        triNum = toTriangle(x)
        if isPentagonal(triNum) and isHexagonal(triNum):
            print x, triNum
            break
        if x % 1e6 == 0:
            print 'x', x

    # for i in range(110, 130):
    #     print i, is_square(i)

    # x = 1234567898765432123456789 ** 2
    # x = 123456789 ** 2
    # for i in range(x, x + 2):
    #     print i, isPerfectSquare(i)

    elapsedTime = time.time() - startTime
    print 'elapsedTime: {:.2f} s'.format(elapsedTime)
# end main

''' helper functions '''

# def isPerfectSquare(apositiveint):
#     x = apositiveint // 2
#     seen = set([x])
#     while x * x != apositiveint:
#         x = (x + (apositiveint // x)) // 2
#         if x in seen:
#             return False
#         seen.add(x)
#     return True

def solveQuadratic(A, B, C, doMinus=False):
    descriminant = (B ** 2) - (4 * A * C)
    # print descriminant
    if not doMinus:
        return (-B + math.sqrt(descriminant)) / (2 * A)
    else:
        return (-B - math.sqrt(descriminant)) / (2 * A)

def toPentagonal(n, doRounding):
    """ Pn = n (3n - 1) / 2 """
    if doRounding:
        n = int(n + 0.5)
    return n * (3 * n - 1) / 2

def isPentagonal(x):
    """
    Pn = n (3n - 1) / 2
    2 * Pn = n (3n - 1)
    0 = 3n^2 - n - 2Pn
    """
    pentagonalRoot = solveQuadratic(3, -1, -2 * x)
    # print pentagonalRoot
    return x == toPentagonal(pentagonalRoot, doRounding=True)

def toHexagonal(n, doRounding):
    """ Hn = n (2n - 1) """
    if doRounding:
        n = int(n + 0.5)
    return n * (2 * n - 1)

def isHexagonal(x):
    """
    Hn = n (2n - 1)
    0 = 2n^2 - n - Hn
    """
    hexagonalRoot = solveQuadratic(2, -1, -x)
    return x == toHexagonal(hexagonalRoot, doRounding=True)

def toTriangle(n):
    """	Tn = n(n+1)/2 """
    return n * (n + 1) / 2





if __name__ == '__main__':
    main()
