#!/usr/bin/env python

from __future__ import division


import time
import math


# from prime_tools.prime_tools import PrimeTools



"""
Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. 
The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. 
However, their difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, 
for which their sum and difference are pentagonal 
and D = |Pk - Pj| is minimised; 
what is the value of D?
"""
def main():
    print 'starting {}'.format(__file__.split('/')[-1])
    startTime = time.time()

    assert not isPentagonal(40754)
    assert isPentagonal(40755)
    assert not isPentagonal(40756)

    pentNumbers = []
    currentMinDiff = 1e9

    results = []

    for x in range(1, 5000):
    # x = 0
    # while True:
    #     x += 1
        newPentNum = toPentagonal(x)

        if x % 1e3 == 0:
            print x

        for idx in range(len(pentNumbers) - 1, -1, -1):
            j = idx + 1
            k = len(pentNumbers) + 1
            prevPentNum = pentNumbers[idx]

            diff = newPentNum - prevPentNum
            if isPentagonal(diff):
            # if True:
                sum = prevPentNum + newPentNum
                if isPentagonal(sum):
                    foundResult = {
                        'j': j,
                        'k': k,
                        'diff': diff,
                        'prevPentNum': prevPentNum,
                        'newPentNum': newPentNum,
                        'sum': sum,
                    }
                    # print 'j & k:', j, k
                    # print 'sum:', prevPentNum, newPentNum, sum
                    # print 'diff:', newPentNum, prevPentNum, diff
                    if diff < currentMinDiff:
                        currentMinDiff = diff
                        print 'currentMinDiff', currentMinDiff
                        time.sleep(1)

                    results.append(foundResult)

                    break
            if diff > currentMinDiff:
                kjDiff = k - j
                if x % 1e3 == 0:
                    print results
                    print 'kjDiff:', kjDiff
                    print diff
                break
         # end for loop


        pentNumbers.append(newPentNum)


    # print pentNumbers








    elapsedTime = time.time() - startTime
    print 'elapsedTime: {:.2f} s'.format(elapsedTime)
# end main

''' helper functions '''

def solveQuadratic(A, B, C, doMinus=False):
    descriminant = (B ** 2) - (4 * A * C)
    # print descriminant
    if not doMinus:
        return (-B + math.sqrt(descriminant)) / (2 * A)
    else:
        return (-B - math.sqrt(descriminant)) / (2 * A)

def toPentagonal(n, doRounding=False):
    """ Pn = n (3n - 1) / 2 """
    if doRounding:
        n = int(n + 0.5)
    return n * (3 * n - 1) / 2

def isPentagonal(x):
    """
    Pn = n (3n - 1) / 2
    2 * Pn = n (3n - 1)
    0 = 3n^2 - n - 2Pn
    """
    pentagonalRoot = solveQuadratic(3, -1, -2 * x)
    # print pentagonalRoot
    return x == toPentagonal(pentagonalRoot, doRounding=True)




if __name__ == '__main__':
    main()
